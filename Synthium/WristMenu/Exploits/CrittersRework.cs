using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Critters.Scripts;
using Fusion.Sockets;
using GorillaExtensions;
using HarmonyLib;
using LitJson;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine;
using UnityEngine.UIElements;
using static Unity.Burst.Intrinsics.Arm;

namespace Synthium.WristMenu.Exploits
{
    internal class CritterRework
    {
        static float SpawnDelay = 1f;
        static float OtherDelay = 1f;

        public static void SpawnPet(Vector3 Position, Vector3 Velocity, float delay = 0.1f)
        {
            //if (Time.time > SpawnDelay || !ControllerInputPoller.instance.rightGrab) return;
            var i = GrabManager();
            var p = GrabPawn();
            GrabOwner(i.guard);
            SetupPawn(i, p);
            p.MoveActor(Position, Quaternion.identity);
            p.SetImpulseVelocity(Velocity, new Vector3(20f, 20f, 20f));
            p.regionId = 1;
            p.SetState(CrittersPawn.CreatureState.Spawning);
            EasyRemoteSend(p);
            SpawnDelay = Time.time + delay;
        }

        public static void BreakStuff()
        {
            CritterRework.SpawnPet(GorillaParent.instance.vrrigs[new System.Random().Next(0, GorillaParent.instance.vrrigs.Count)].transform.position, new UnityEngine.Vector3(0f, 0f, 0f));
        }
        public static void GrabOwner(RequestableOwnershipGuard guard)
        {
            guard.RequestOwnershipImmediately(() =>
            {
                Debug.LogError($"{DateTime.Now} Failed to transfer ownership.");
                return;
            });
        }

        public static void EasyRemoteSend(CrittersPawn p)
        {
            GrabManager().SendRPC("RemoteSpawnCreature", RpcTarget.All, new object[]
            {//
                 p.actorId,
                 p.regionId,
                 p.visuals.Appearance.WriteToRPCData()
            });
        }

        public static void SetupPawn(CrittersManager m, CrittersPawn p)
        {
            p.SetTemplate(m.creatureIndex.GetRandomCritterType());
            p.currentState = CrittersPawn.CreatureState.Idle;
        }

        public static void ResetRoom()
        {
            for (int i = 0; i < GrabManager().allActors.Count; i++)
            {
                CrittersActor crittersActor = GrabManager().allActors[i];
                if (crittersActor.gameObject.activeSelf)
                {
                    crittersActor.gameObject.SetActive(false);
                    
                }
            }
        }

        public static void Food()
        {
            try
            {

                var Manager = GrabManager();
                GrabOwner(Manager.guard);

                Traverse ReleaseFoodWhenUpsideDownTraverse = Traverse.Create(Resources.FindObjectsOfTypeAll<ReleaseFoodWhenUpsideDown>().First());

                var maxFood = ReleaseFoodWhenUpsideDownTraverse.Field("maxFood").GetValue<float>();
                var startingFood = ReleaseFoodWhenUpsideDownTraverse.Field("startingFood").GetValue<float>();
                var foodSubIndex = ReleaseFoodWhenUpsideDownTraverse.Field("foodSubIndex").GetValue<int>();

                CrittersActor crittersActor = CrittersManager.instance.SpawnActor(CrittersActor.CrittersActorType.Food, foodSubIndex);


                if (!crittersActor.IsNull())
                {
                    CrittersFood crittersFood = (CrittersFood)crittersActor;
                    crittersFood.MoveActor(GorillaLocomotion.GTPlayer.Instance.rightControllerTransform.position, Quaternion.identity, false, true, true);
                    crittersFood.SetImpulseVelocity(Vector3.zero, Vector3.zero);
                    crittersFood.SpawnData(maxFood, startingFood, 3000f);
                    crittersFood.AttemptAddStoredObjectCollider(crittersFood);
                    EasyRemoteSend((crittersFood as CrittersActor) as CrittersPawn);
                    crittersFood.AttemptAddStoredObjectCollider(crittersFood);
                    return;
                }
                else
                {
                    Debug.Log("NULL NIGGA KYS GAY");
                }
            }
            catch { }

            ResetRoom();
        }

        public static CrittersManager GrabManager() => CrittersManager.instance ?? throw new NotImplementedException();
        public static CrittersPawn GrabPawn() => (CrittersPawn)GrabManager().SpawnActor(CrittersActor.CrittersActorType.Food, -1) ?? throw new NotImplementedException();
        public static CrittersPawn GrabPawnCustom(CrittersActor.CrittersActorType t) => (CrittersPawn)GrabManager().SpawnActor(t, -1) ?? throw new NotImplementedException();

    }

}
